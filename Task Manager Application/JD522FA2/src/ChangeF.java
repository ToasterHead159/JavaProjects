
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author jonva
 */
public class ChangeF extends javax.swing.JFrame {

    public final String url = "jdbc:sqlite:TaskStorageDB";
    ArrayList<TaskClass> TaskList = new ArrayList<TaskClass>();

    public void Searching(String CatName, String UserValue) {
        File alive = new File("taskstoragedb");
        if (alive.exists()) {
            try {
                Connection connect = DriverManager.getConnection(url);
                String search = "SELECT * FROM TASKS WHERE " + CatName + " LIKE '" + UserValue + "%';";
                Statement SEARCHING = connect.createStatement();
                ResultSet SetResult = SEARCHING.executeQuery(search);
                DefaultComboBoxModel comboMod = (DefaultComboBoxModel) serresultcmb.getModel();
                int itemnum = 0;

                while (SetResult.next()) {
                    //here the returned data is used to make an object of the taskclass to store the data and is inserted into the combobox for the user to see.
                    TaskClass tasks = new TaskClass(SetResult.getInt("ID"), SetResult.getString("Name"), SetResult.getString("Description"), SetResult.getString("Status"), SetResult.getString("Category"));
                    TaskList.add(tasks);
                    comboMod.insertElementAt(tasks, itemnum);
                    itemnum++;
                }

                SetResult.close();
                SEARCHING.close();
                connect.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage());
            }
        }
    }

    public void populateUpdate() { //this is used to enable to unenable the specific inputs fields depending on which input field is selected from the combobox
        if (UpSelCom.getSelectedItem() == "Task Name") {
            updateTxt.setEnabled(true);
            updateCombo.setEnabled(false);
            String newName = updateTxt.getText();
        } else if (UpSelCom.getSelectedItem() == "Description") {
            updateTxt.setEnabled(true);
            updateCombo.setEnabled(false);
            String newDesc = updateTxt.getText();
        } else if (UpSelCom.getSelectedItem() == "Status") {
            updateCombo.setEnabled(true);
            updateTxt.setEnabled(false);
            updateCombo.removeAllItems();
            updateCombo.addItem("Started");
            updateCombo.addItem("In Progress");
            updateCombo.addItem("Stalled");
            updateCombo.addItem("Completed");
        } else if (UpSelCom.getSelectedItem() == "Category") {
            updateCombo.setEnabled(true);
            updateTxt.setEnabled(false);
            updateCombo.removeAllItems();
            populateCategoryCombo();
        }
    }

    public void populateCategoryCombo() {
        File alive = new File("taskstoragedb");
        if (alive.exists()) {
            try {
                Connection connect = DriverManager.getConnection(url);
                String combopop = "SELECT * FROM CATEGORIES ";
                Statement popcombo = connect.createStatement();
                ResultSet SetResult = popcombo.executeQuery(combopop);
                DefaultComboBoxModel comboMod = (DefaultComboBoxModel) updateCombo.getModel();
                updateCombo.removeAllItems();

                TaskClass task;
                while (SetResult.next()) {
                    updateCombo.addItem(SetResult.getString("CATEGORY_NAME"));

                }
                connect.close();
                popcombo.close();
                SetResult.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage());
            }
        }

    }

    public ChangeF() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        updateBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        serTxt = new javax.swing.JTextField();
        serComBx = new javax.swing.JComboBox<>();
        serresultcmb = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        serBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        UpSelCom = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        updateTxt = new javax.swing.JTextField();
        updateCombo = new javax.swing.JComboBox<>();

        setTitle("Change a Task");
        setLocation(new java.awt.Point(750, 150));
        setMaximumSize(new java.awt.Dimension(477, 412));
        setMinimumSize(new java.awt.Dimension(477, 412));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 36)); // NOI18N
        jLabel1.setText("Change a Task");

        updateBtn.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 0, 18)); // NOI18N
        jLabel2.setText("Search");
        jLabel2.setToolTipText("");

        serComBx.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        serComBx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Task Name", "Description", "Status", "Category" }));
        serComBx.setSelectedIndex(-1);

        jLabel3.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        jLabel3.setText("Select the task to change");

        serBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        serBtn.setText("Search");
        serBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        jLabel4.setText("Search By:");

        UpSelCom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Task Name", "Description", "Status", "Category" }));
        UpSelCom.setSelectedIndex(-1);
        UpSelCom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                UpSelComItemStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Franklin Gothic Demi", 0, 18)); // NOI18N
        jLabel9.setText("Select what to change:");

        updateTxt.setEnabled(false);

        updateCombo.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(updateBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(UpSelCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(serresultcmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(serComBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(serBtn))
                                    .addComponent(serTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel9)
                            .addComponent(updateTxt)
                            .addComponent(updateCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(serTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serComBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serBtn)
                    .addComponent(jLabel4))
                .addGap(16, 16, 16)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(serresultcmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(UpSelCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(updateBtn)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void serBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serBtnActionPerformed
        if (serTxt.getText().isBlank() || serComBx.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(rootPane, "Search or search by cannot be empty!");
        } else {
            serresultcmb.removeAllItems();
            if (serComBx.getSelectedItem() == "Task Name") {
                Searching("Name", serTxt.getText());
            } else if (serComBx.getSelectedItem() == "Description") {
                Searching("Description", serTxt.getText());
            } else if (serComBx.getSelectedItem() == "Status") {
                Searching("Status", serTxt.getText());
            } else if (serComBx.getSelectedItem() == "Category") {
                Searching("Category", serTxt.getText());
            }
        }
        serTxt.setText("");
        serComBx.setSelectedIndex(-1);
    }//GEN-LAST:event_serBtnActionPerformed

    private void UpSelComItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_UpSelComItemStateChanged
        populateUpdate();
    }//GEN-LAST:event_UpSelComItemStateChanged

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        String LatestValue;
        TaskClass task = (TaskClass) serresultcmb.getSelectedItem();
        int spectaskID = task.getID();
        String columnName = UpSelCom.getSelectedItem().toString();
        if (columnName == "Task Name" || columnName == "Description") {
            LatestValue = updateTxt.getText();
        } else {
            LatestValue = updateCombo.getSelectedItem().toString();
        }

        File alive = new File("taskstoragedb");
        if (alive.exists()) {
            try {
                Connection connect = DriverManager.getConnection(url);
                String updateSTMT = "UPDATE TASKS SET " + columnName + " = '" + LatestValue + "' WHERE ID = " + spectaskID;
                Statement updateDB = connect.createStatement();
                updateDB.execute(updateSTMT);
                JOptionPane.showMessageDialog(rootPane, "Changes Made!");

                updateDB.close();
                connect.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(rootPane, e.getMessage());
            }
            serresultcmb.setSelectedIndex(-1);
            updateTxt.setText("");
            updateCombo.setSelectedIndex(-1);
            UpSelCom.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        ImageIcon icon = new ImageIcon("src/FA2.png");
        this.setIconImage(icon.getImage());
        populateCategoryCombo();
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChangeF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChangeF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChangeF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChangeF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChangeF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> UpSelCom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton serBtn;
    private javax.swing.JComboBox<String> serComBx;
    private javax.swing.JTextField serTxt;
    private javax.swing.JComboBox<String> serresultcmb;
    private javax.swing.JButton updateBtn;
    private javax.swing.JComboBox<String> updateCombo;
    private javax.swing.JTextField updateTxt;
    // End of variables declaration//GEN-END:variables
}
